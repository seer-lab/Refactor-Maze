<code>

<block>

<correctcode>
#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;

//initialize connect 4 board to contain all
//empty cells
void initializeBoard();

//display connents of board
void displayBoard();

//Global variable for representing game board
char board[7][6];

//Add one piece to board
bool addPiece(int col, bool isPlayer1);

//Checks if game is over
bool isGameOver(bool isPlayer1);

//Declare the winner
void declareWinner(bool isPlayer1);

const int COLUMNS = 7;
const int ROWS = 6;

int main()
{
	cout &lt;&lt; "Welcome to UOIT Connect 4!" &lt;&lt; endl;
	//Setup and display initial game board
	initializeBoard();
	displayBoard();

	//Create a game play loop
	bool PlayerOne = true;
	while (!isGameOver(!PlayerOne))
	{
	</correctcode>
</block>

<block>

<feedback>

<hint id = "1">
This variable already has an appropriate name, 
so there is no immediate reason to rename it.
</hint>

</feedback>

<smellcode refactorType = "2">

		bool <smell id = "0">aBool</smell> = false;
		int <smell id = "1">colToPlay</smell> = -1;
		//ask current player for column until valid and available
		//column is selected
		while (!aBool)
		{
			cout &lt;&lt; "Player ";
			if (PlayerOne)
			{
				cout &lt;&lt; "1";
			}
			else
			{
				cout &lt;&lt; "2";
			}
			cout &lt;&lt; ": Select a column (0-6) to play: ";
			cin &gt;&gt; colToPlay;
			aBool = addPiece(colToPlay, PlayerOne);
			if (!aBool)
			{
				cout &lt;&lt; "Bad column value! Try again." &lt;&lt; endl;
			}
		}
</smellcode>

<correctcode>
		bool validCol = false;
		int colToPlay = -1;
		//ask current player for column until valid and available
		//column is selected
		while (!validCol)
		{
			cout &lt;&lt; "Player ";
			if (PlayerOne)
			{
				cout &lt;&lt; "1";
			}
			else
			{
				cout &lt;&lt; "2";
			}
			cout &lt;&lt; ": Select a column (0-6) to play: ";
			cin &gt;&gt; colToPlay;
			validCol = addPiece(colToPlay, PlayerOne);
			if (!validCol)
			{
				cout &lt;&lt; "Bad column value! Try again." &lt;&lt; endl;
			}
		}
</correctcode>

</block>

<block>
<correctcode>
		displayBoard();
		PlayerOne = !PlayerOne;
	}
	return 0;
}

</correctcode>

</block>

<block>

<feedback>

<hint id = "1">While this is a magic number, 
it is not the most frequently occurring number
</hint>

</feedback>

<smellcode refactorType = "0">

void initializeBoard()
{
	for (int col = 0; col &lt; <smell id = "0">7</smell>; col++)
	{
		for (int row = 0; row &lt; ROWS; row++)
		{
			board[col][row] = '-';
		}
	}
}

void displayBoard()
{
	cout &lt;&lt; endl &lt;&lt; "Connect 4 Board:" &lt;&lt; endl;
	for (int row = 0; row &lt; <smell id = "1">6</smell>; row++)
	{
		for (int col = 0; col &lt; <smell id = "0">7</smell>; col++)
		{
			cout &lt;&lt; board[col][row] &lt;&lt; " ";
		}
		cout &lt;&lt; endl;
	}
	cout &lt;&lt; "0 1 2 3 4 5 6" &lt;&lt; endl;
}
</smellcode>

<correctcode>
void initializeBoard()
{
	for (int col = 0; col &lt; COLUMNS; col++)
	{
		for (int row = 0; row &lt; ROWS; row++)
		{
			board[col][row] = '-';
		}
	}
}

void displayBoard()
{
	cout &lt;&lt; endl &lt;&lt; "Connect 4 Board:" &lt;&lt; endl;
	for (int row = 0; row &lt; ROWS; row++)
	{
		for (int col = 0; col &lt; COLUMNS; col++)
		{
			cout &lt;&lt; board[col][row] &lt;&lt; " ";
		}
		cout &lt;&lt; endl;
	}
	cout &lt;&lt; "0 1 2 3 4 5 6" &lt;&lt; endl;
}
</correctcode>

</block>

<block>
<correctcode>
bool addPiece(int col, bool isPlayer1)
{
	//check if col is 0-6
	if ((col &lt; 0) || (col &gt; 6))
	{
		return false;
	}
	//check if col is full
	else if (board[col][0] != '-')
	{
		return false;
	}
	else
	{
		for (int row = 5; row &gt;= 0; row--)
		{
			if (board[col][row] == '-')
			{
				if (isPlayer1)
				{
					board[col][row] = 'X';
				}
				else
				{
					board[col][row] = 'O';
				}
				break;
			}
		}
		return true;
	}
}
</correctcode>
</block>

<block>

<feedback>

<hint id = "1">While this piece of code could be extracted into a method, it is not the most appropriate piece of code to extract</hint>

</feedback>

<smellcode refactorType = "1">


bool isGameOver(bool isPlayer1)
{
	char currPiece;
	<smell id = "1">if (isPlayer1)
	{
		currPiece = 'X';
	}
	else
	{
		currPiece = 'O';
	}</smell>

	//Loop through all of the rows
	<smell id = "0">for (int r = 0; r &lt; ROWS; r++)
	{
		int counter = 0;
		for (int i = 0; i &lt; COLUMNS; i++)
		{
			if (board[i][r] == currPiece)
			{
				counter++;
			}
			else
			{
				counter = 0;
			}
			if (counter == 4)
			{
				declareWinner(isPlayer1);
				return true;
			}
		}
	}</smell>
</smellcode>

<correctcode>

bool checkRows(char currPiece, bool isPlayer1)
{
	for (int r = 0; r &lt; ROWS; r++)
	{
		int counter = 0;
		for (int i = 0; i &lt; COLUMNS; i++)
		{
			if (board[i][r] == currPiece)
			{
				counter++;
			}
			else
			{
				counter = 0;
			}
			if (counter == 4)
			{
				declareWinner(isPlayer1);
				return true;
			}
		}
	}
	return false;
}

bool isGameOver(bool isPlayer1)
{
	char currPiece;

	if (isPlayer1)
	{
		currPiece = 'X';
	}
	else
	{
		currPiece = 'O';
	}

	if (checkRows(currPiece, isPlayer1))
	{
		return true;
	}
</correctcode>

</block>

<block>
<correctcode>
	//Check if current player has won
	//4 pieces horizontally -- naive solution

	//4 pieces vertically
	for (int c = 0; c &lt; COLUMNS; c++)
	{
		int counter = 0;
		for (int i = 0; i &lt; ROWS; i++)
		{
			if (board[c][i] == currPiece)
			{
				counter++;
			}
			else
			{
				counter = 0;
			}
			if (counter == 4)
			{
				declareWinner(isPlayer1);
				return true;
			}
		}
	}
	//4 pieces diagonally (both ways!)


	//Check if out of moves
	bool movesLeft = false;
	for (int col = 0; col &lt; COLUMNS; col++)
	{
		if (board[col][0] == '-')
		{
			movesLeft = true;
		}
	}
	if (!movesLeft)
	{
		cout &lt;&lt; "Game Over :(. Out of moves." &lt;&lt; endl;
		return true;
	}
	//Otherwise
	return false;
}

void declareWinner(bool isPlayer1)
{
	if (isPlayer1)
	{
		cout &lt;&lt; "Congratulations Player 1! "
			&lt;&lt; "You Win!" &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; "Congratulations Player 2! "
			&lt;&lt; "You Win!" &lt;&lt; endl;
	}
}
</correctcode>
</block>

</code>
